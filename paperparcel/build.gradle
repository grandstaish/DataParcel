apply plugin: 'com.android.library'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion

    consumerProguardFiles 'proguard-rules.txt'

    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }

  compileOptions {
    sourceCompatibility rootProject.ext.sourceCompatibilityVersion
    targetCompatibility rootProject.ext.targetCompatibilityVersion
  }
}

tasks.withType(Test) {
  testLogging {
    events "passed", "skipped", "failed"
  }
}

dependencies {
  compile project(':paperparcel-api')
  compile deps.supportAnnotations

  androidTestCompile deps.junit
  androidTestCompile deps.truth
  androidTestCompile deps.supportTestRunner
  androidTestAnnotationProcessor project(':paperparcel-compiler')

  testCompile deps.junit
  testCompile deps.truth
  testCompile deps.compiletesting
  testCompile files(getRuntimeJar())
  testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
  testCompile project(':paperparcel-compiler')
}

def getRuntimeJar() {
  try {
    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
    File runtimeJar = new File(javaBase, "lib/rt.jar");
    if (runtimeJar.exists()) {
      return runtimeJar;
    }
    runtimeJar = new File(javaBase, "jre/lib/rt.jar");
    return runtimeJar.exists() ? runtimeJar : null;
  } catch (IOException e) {
    throw new RuntimeException(e);
  }
}

apply from: rootProject.file('gradle/bintray.gradle')
apply from: rootProject.file('gradle/snapshots.gradle')
